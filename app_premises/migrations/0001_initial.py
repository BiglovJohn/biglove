# Generated by Django 4.1.1 on 2022-11-28 14:50

import app_premises.models
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('app_data', '__first__'),
    ]

    operations = [
        migrations.CreateModel(
            name='Camp',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('realty_country', models.CharField(blank=True, max_length=250, verbose_name='Страна')),
                ('realty_region', models.CharField(blank=True, max_length=250, verbose_name='Регион')),
                ('realty_city', models.CharField(blank=True, max_length=250, verbose_name='Населенный пункт')),
                ('realty_address', models.CharField(blank=True, max_length=250, verbose_name='Адрес')),
                ('realty_type', models.CharField(blank=True, choices=[('h', 'Отель'), ('c', 'Хостел'), ('a', 'Апартаменты'), ('ah', 'Апарт-отель'), ('gh', 'Гостевой дом'), ('k', 'Коттедж'), ('v', 'Вилла'), ('kp', 'Кемпинг'), ('gp', 'Глэмпинг'), ('kv', 'Квартира'), ('dm', 'Дом')], max_length=2, verbose_name='Тип объекта')),
                ('full_description', models.TextField(blank=True, max_length=2000, verbose_name='Описание')),
                ('realty_price', models.PositiveIntegerField(blank=True, default=0, verbose_name='Цена')),
                ('is_advertised', models.BooleanField(default=False, verbose_name='Статус продвижения')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активно')),
                ('children', models.BooleanField(blank=True, default=False, verbose_name='Можно с детьми')),
                ('animals', models.BooleanField(blank=True, default=False, verbose_name='Можно с животными')),
                ('smoke', models.BooleanField(blank=True, default=False, verbose_name='Можно курить')),
                ('realty_name', models.CharField(max_length=100, verbose_name='Название объекта')),
                ('slug', models.SlugField(default=None, unique=True, verbose_name='URL')),
                ('count_of_persons', models.PositiveIntegerField(default=1, verbose_name='Количество спальных мест')),
                ('realty_area', models.PositiveIntegerField(blank=True, default=0, verbose_name='Площадь')),
                ('region_center', models.CharField(blank=True, max_length=30, verbose_name='Региональный центр')),
                ('realty_to_city', models.CharField(blank=True, max_length=10, verbose_name='Расстояние до города')),
                ('book_cancel', models.CharField(choices=[('y', 'Беспл. отмена брони'), ('n', 'Нет беспл. отмены брони')], default='n', max_length=1, verbose_name='Отмена бронирования')),
                ('pay_type', models.CharField(choices=[('o', 'Оплата онлайн'), ('c', 'Оплата на месте')], default='o', max_length=1, verbose_name='Способ оплаты')),
                ('food_options', models.CharField(choices=[('a', 'Завтрак включён'), ('b', 'Завтрак + обед или ужин включены'), ('c', 'Завтрак, обед и ужин включены'), ('d', 'Всё включено'), ('e', 'Питание не включено')], default='e', max_length=1, verbose_name='Опции питания')),
                ('arriving_time', models.TimeField(default='14:00', verbose_name='Время заселения')),
                ('departure_time', models.TimeField(default='12:00', verbose_name='Время выезда')),
                ('realty_book_count', models.PositiveIntegerField(default=0, verbose_name='Бронирований')),
                ('company', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Недвижимость',
                'verbose_name_plural': 'Недвижимость',
                'db_table': 'camps_db',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='Flat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('realty_country', models.CharField(blank=True, max_length=250, verbose_name='Страна')),
                ('realty_region', models.CharField(blank=True, max_length=250, verbose_name='Регион')),
                ('realty_city', models.CharField(blank=True, max_length=250, verbose_name='Населенный пункт')),
                ('realty_address', models.CharField(blank=True, max_length=250, verbose_name='Адрес')),
                ('full_description', models.TextField(blank=True, max_length=2000, verbose_name='Описание')),
                ('realty_price', models.PositiveIntegerField(blank=True, default=0, verbose_name='Цена')),
                ('is_advertised', models.BooleanField(default=False, verbose_name='Статус продвижения')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активно')),
                ('children', models.BooleanField(blank=True, default=False, verbose_name='Можно с детьми')),
                ('animals', models.BooleanField(blank=True, default=False, verbose_name='Можно с животными')),
                ('smoke', models.BooleanField(blank=True, default=False, verbose_name='Можно курить')),
                ('rooms_count', models.PositiveIntegerField(blank=True, default=1, verbose_name='Количество комнат')),
                ('house_number', models.CharField(blank=True, default='', max_length=10, verbose_name='Номер дома')),
                ('house_korpus', models.CharField(blank=True, default='', max_length=10, verbose_name='Корпус, литер, блок')),
                ('floor', models.PositiveIntegerField(blank=True, default=1, verbose_name='Этаж')),
                ('floor_count', models.PositiveIntegerField(blank=True, null=True, verbose_name='Количество этажей')),
                ('city_area', models.CharField(blank=True, max_length=50, verbose_name='Район города')),
                ('micro_city_area', models.CharField(blank=True, max_length=50, verbose_name='Микрорайон города')),
                ('bathroom', models.CharField(blank=True, choices=[('a', 'Совмещенный'), ('b', 'Раздельный')], default='a', max_length=1, verbose_name='Санузел')),
                ('deposit', models.PositiveIntegerField(blank=True, null=True, verbose_name='Залог')),
                ('realty_area', models.FloatField(blank=True, null=True, verbose_name='Площадь')),
                ('realty_type', models.CharField(choices=[('kv', '1-к комнатная квартира'), ('2k', '2-х комнатная квартира'), ('3k', '3-х комнатная квартира'), ('4k', '4-х комнатная квартира'), ('ks', 'Квартира-студия'), ('a', 'Апартаменты'), ('k', 'Коттедж'), ('v', 'Вилла'), ('dm', 'Дом')], max_length=2, verbose_name='Тип объекта')),
                ('company', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Жильё',
                'verbose_name_plural': 'Жильё',
                'db_table': 'flats_db',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='FurnitureModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=40, verbose_name='Название')),
                ('category', models.CharField(max_length=40, verbose_name='Категория')),
                ('icon_url', models.CharField(blank=True, max_length=100, verbose_name='Иконка')),
            ],
            options={
                'verbose_name': 'Мебель',
                'verbose_name_plural': 'Мебель',
                'db_table': 'furniture_db',
                'ordering': ['category'],
            },
        ),
        migrations.CreateModel(
            name='RealtyOptions',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('option_name', models.CharField(max_length=100, verbose_name='Название опции')),
                ('category', models.CharField(blank=True, max_length=50, verbose_name='Гатегория')),
                ('icon_url', models.CharField(blank=True, max_length=100, verbose_name='Иконка')),
            ],
            options={
                'verbose_name': 'Опция',
                'verbose_name_plural': 'Опции',
                'db_table': 'options_db',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='TechniqueModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=40, verbose_name='Название')),
                ('category', models.CharField(max_length=40, verbose_name='Категория')),
                ('icon_url', models.CharField(blank=True, max_length=100, verbose_name='Иконка')),
            ],
            options={
                'verbose_name': 'Техника',
                'verbose_name_plural': 'Техника',
                'db_table': 'technique_db',
                'ordering': ['category'],
            },
        ),
        migrations.CreateModel(
            name='Reservation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('book_identifier', models.CharField(default=uuid.uuid4, max_length=10, unique=True, verbose_name='Номер бронирования')),
                ('check_in', models.DateField(verbose_name='Дата заезда')),
                ('check_out', models.DateField(verbose_name='Дата выселения')),
                ('is_booked', models.BooleanField(default=False, verbose_name='Бронь')),
                ('total_sum', models.IntegerField(default=0, verbose_name='Сумма')),
                ('booked_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата бронирования')),
                ('is_canceled', models.BooleanField(default=False, verbose_name='Отменённая')),
                ('canceled_at', models.DateTimeField(auto_now=True, verbose_name='Дата отмены')),
                ('guest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Гости')),
                ('realty', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app_premises.camp', verbose_name='Объект недвижимости')),
            ],
            options={
                'verbose_name': 'Бронирование',
                'verbose_name_plural': 'Бронирования',
                'db_table': 'reservations_db',
                'ordering': ['check_in'],
            },
        ),
        migrations.CreateModel(
            name='Photos',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('photo', models.ImageField(blank=True, upload_to=app_premises.models.user_directory_path, validators=[app_premises.models.max_value, django.core.validators.FileExtensionValidator(['jpg', 'jpeg', 'png'], 'Поддерживаются файлы JPG, JPEG и PNG')], verbose_name='Фотография')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Дата загрузки')),
                ('camp', models.ManyToManyField(blank=True, related_name='camp_photos', to='app_premises.camp', verbose_name='Идентификатор кемпа')),
                ('flat', models.ManyToManyField(blank=True, related_name='flat_photos', to='app_premises.flat', verbose_name='Идентификатор квартиры')),
            ],
            options={
                'verbose_name': 'Фотография',
                'verbose_name_plural': 'Фотографии',
                'db_table': 'photos_db',
                'ordering': ['created_at'],
            },
        ),
        migrations.AddField(
            model_name='flat',
            name='furniture',
            field=models.ManyToManyField(blank=True, related_name='furnitures', to='app_premises.furnituremodel', verbose_name='Мебель'),
        ),
        migrations.AddField(
            model_name='flat',
            name='technique',
            field=models.ManyToManyField(blank=True, related_name='techniques', to='app_premises.techniquemodel', verbose_name='Техника'),
        ),
        migrations.AddField(
            model_name='flat',
            name='views_count',
            field=models.ManyToManyField(blank=True, to='app_data.ip'),
        ),
        migrations.CreateModel(
            name='Favorite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hotel_objects', models.ManyToManyField(blank=True, related_name='favorite_hotels', to='app_premises.camp', verbose_name='Избранные отели')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favorite', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Избранное',
                'verbose_name_plural': 'Избранные',
                'db_table': 'favorites_db',
            },
        ),
        migrations.AddField(
            model_name='camp',
            name='options',
            field=models.ManyToManyField(blank=True, related_name='option_list', to='app_premises.realtyoptions', verbose_name='Опции'),
        ),
        migrations.AddField(
            model_name='camp',
            name='views_count',
            field=models.ManyToManyField(blank=True, to='app_data.ip'),
        ),
    ]
